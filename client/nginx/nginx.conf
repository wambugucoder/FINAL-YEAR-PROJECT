#if you have a higher traffic site or a dedicated instance for nginx, you want this to be set to one worker per CPU core.
#nginx provides a nice option that tells it to automatically set this to one worker per core like this
worker_processes auto;
# Allows binding worker processes automatically to available CPUs
worker_cpu_affinity auto;
# The number of simultaneous connections is limited by the number of file descriptors available on the system as each socket will open a file descriptor. If NGINX tries to open more sockets than the available file descriptors, it will lead to the Too many opened files message in the error.log.
worker_rlimit_nofile 65535;

events {
    use epoll;
    worker_connections 1024;
    multi_accept on;
}


#serving my production build
http {
 # Enable Gzip compressed.
  gzip on;

  # Enable compression both for HTTP/1.0 and HTTP/1.1 (required for CloudFront).
  gzip_http_version  1.0;

  # Compression level (1-9).
  # 5 is a perfect compromise between size and cpu usage, offering about
  # 75% reduction for most ascii files (almost identical to level 9).
  gzip_comp_level    5;

  # Don't compress anything that's already small and unlikely to shrink much
  # if at all (the default is 20 bytes, which is bad as that usually leads to
  # larger files after gzipping).
  gzip_min_length    256;

  # Compress data even for clients that are connecting to us via proxies,
  # identified by the "Via" header (required for CloudFront).
  gzip_proxied       any;

  # Tell proxies to cache both the gzipped and regular version of a resource
  # whenever the client's Accept-Encoding capabilities header varies;
  # Avoids the issue where a non-gzip capable client (which is extremely rare
  # today) would display gibberish if their proxy gave them the gzipped version.
  gzip_vary          on;

  # Compress all output labeled with one of the following MIME-types.
  gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/rss+xml
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/opentype
    image/svg+xml
    image/x-icon
    text/css
    text/plain
    text/x-component;
  # text/html is always compressed by HttpGzipModule

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format compression '$remote_addr - $remote_user [$time_local] '
        '"$request" $status $upstream_addr '
        '"$http_referer" "$http_user_agent" "$gzip_ratio"';
#server that nginx proxies request to
upstream backend{
  server server:8443;
}
 server{
   listen 80 default_server;
   listen [::]:80 default_server ipv6only=on;
   server_name pollsapp-2021.westeurope.cloudapp.azure.com;
   root   /var/www;
   return 301 https://$host$request_uri;
 }
  server {

    listen 443 ssl;
    listen [::]:443 ssl ipv6only=on;
    server_name pollsapp-2021.westeurope.cloudapp.azure.com;
    access_log /var/log/nginx/access.log compression;
    root   /var/www;
   # MIME
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        # Display nginx Version number in error or http header may result in hacker to search for known vulnerability. Therefore, the version number should be removed for every http response.
        server_tokens "off";
        #charset utf-8;
        # This directive, by default, is disabled to allow small packets to wait for a specified period before they are sent at once. To allow all data to be sent at once, this directive is enabled.
        tcp_nodelay on;
        #  Because we have enabled tcp_nodelay directive, small packets are sent at once. However, if you still want to make use of John Nagle’s buffering algorithm, we can also enable the tcp_nopush to add packets to each other and send them all at once.
        tcp_nopush on;
        # Defines a timeout for reading client request body. The timeout is set only for a period between two successive read operations, not for the transmission of the whole request body. If a client does not transmit anything within this time, the 408 (Request Time-out) error is returned to the client.
        client_body_timeout 12;
        # Defines a timeout for reading client request header. If a client does not transmit the entire header within this time, the 408 (Request Time-out) error is returned to the client.
        client_header_timeout 12;
        # This directive sets the buffer size for the request body. If you plan to run the webserver on 64-bit systems, you need to set the value to 16k. If you want to run the webserver on the 32-bit system, set the value to 8k.
        client_body_buffer_size 16K;
        # Similar to the previous directive, only instead it handles the client header size. For all intents and purposes, 1K is usually a decent size for this directive not unless you're sending mayopic stuff via header i.e permissions.
        client_header_buffer_size 1k;
        # The maximum number and size of buffers for large client headers.
        large_client_header_buffers 2 1k;
        # The maximum allowed size for a client request. If the maximum size is exceeded, then Nginx will spit out a 413 error or Request Entity Too Large.
        client_max_body_size 64M;
        # Defines the maximum size of an entry in the MIME types hash tables.
        types_hash_max_size 4096;
        # The first parameter sets a timeout during which a keep-alive client connection will stay open on the server side. The zero value disables keep-alive client connections. The optional second parameter sets a value in the “Keep-Alive: timeout=time” response header field. Two parameters may differ. The “Keep-Alive: timeout=time” header field is recognized by Mozilla and Konqueror. The default is 75 seconds.
        keepalive_timeout 120s;
        # Configure a number of requests to keep alive for a specific period of time.  You can set the number of requests to 20 or 30.
        keepalive_requests 120;
        # if you want to disable keepalive connection for a specific group of browsers, use this directive.
        #keepalive_disable;
        #Sets a timeout for transmitting a response to the client. The timeout is set only between two successive write operations, not for the transmission of the whole response. If the client does not receive anything within this time, the connection is closed.
        send_timeout 75s;
        # TLS certificate and key
        ssl_certificate           /etc/ssl/certs/nginx-selfsigned.crt;
        ssl_certificate_key       /etc/ssl/private/nginx-selfsigned.key;
        # enable session resumption to improve https performance
        # http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_buffer_size 1400;
        # generated using:# openssl dhparam -dsaparam -out /etc/ssl/dh4096.pem 4096
        ssl_ecdh_curve secp384r1;
        ssl_session_tickets off;
        # enables server-side protection from BEAST attacks
        # http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
        ssl_prefer_server_ciphers on;
        # disable SSLv3(enabled by default since nginx 0.8.19) since it's less secure then TLS http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
        ssl_protocols TLSv1.2 TLSv1.3;
        # ciphers chosen for forward secrecy and compatibility
        # http://blog.ivanristic.com/2013/08/configuring-apache-nginx-and-openssl-for-forward-secrecy.html
        # Disabled insecure ciphers suite. For example, MD5, DES, RC4, PSK
        ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4:@STRENGTH";
        # -!MEDIUM：exclude encryption cipher suites using 128 bit encryption.
        # -!LOW：   exclude encryption cipher suites using 64 or 56 bit encryption algorithms
        # -!EXPORT： exclude export encryption algorithms including 40 and 56 bits algorithms.
        # -!aNULL：  exclude the cipher suites offering no authentication. This is currently the anonymous DH algorithms and anonymous ECDH algorithms.
        # These cipher suites are vulnerable to a "man in the middle" attack and so their use is normally discouraged.
        # -!eNULL：exclude the "NULL" ciphers that is those offering no encryption.
        # Because these offer no encryption at all and are a security risk they are disabled unless explicitly included.
        # @STRENGTH：sort the current cipher list in order of encryption algorithm key length.
        # enable ocsp stapling (mechanism by which a site can convey certificate revocation information to visitors in a privacy-preserving, scalable manner)
        # http://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox/
        #Cloudflare resolver 1dot1dot1dot1.cloudflare-dns.com
        resolver 1.1.1.1 1.0.0.1 [2606:4700:4700::1111] [2606:4700:4700::1001];
        resolver_timeout 5s;
        ssl_stapling off;
        ssl_stapling_verify on;





  # enable nginx metrics for the prometheus scraper
     location /nginx_status {
            stub_status on;
            access_log  off;
            allow all;  # REPLACE with your access policy
        }
  location / {

    index  index.html index.htm;

    #to redirect allrequests to index.html
    #useful when using react router
    try_files $uri $uri/ /index.html;
  }

  error_page   500 502 503 504  /50x.html;

  location = /50x.html {
   root   /var/www;
  }

  location ~* \.(?:manifest|appcache|html?|xml|json)$ {
            expires -1;
            # access_log logs/static.log; # I don't usually include a static log
        }


# Media: images, icons, video, audio, HTC
        location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
          expires 1M;
          access_log off;
          add_header Cache-Control "public";
        }

        location ~* \.(?:css|js)$ {
            try_files $uri =404;
            expires 1y;
            access_log off;
            add_header Cache-Control "public";
        }

        # Any route containing a file extension (e.g. /devicesfile.js)
        location ~ ^.+\..+$ {
            try_files $uri =404;
        }

  #setting up a reverse proxy for my backend
   location /api {

        proxy_pass https://backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

}



}
